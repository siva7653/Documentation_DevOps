## IMAGE
   it is peace of software and lightweight executable that includes everything code,run time,libraies,environment and varibles

## container
   container is a isolation environment for running the application making is easier to develop,deploy, and manage softwares and across different computng environment

## volumes
    volumes provide a way to manage and store data separatecly from the container systeam. making it possible to persist data even if the container is stopped or removed

## network
    in docker networks provide communication mechanism for connecting multiple containers allowing them communicate with each other
     1-bridge
     2-host
     3-none

    bridge- (1)-in the bridge network we are communicated one container to another container easily
            (2)-bridge network nothing but default network.
            (3)-when you start container with out specifying any network it will take bridge network
    host-   (1)-when you run a container in the host network mode it bypasses docker network isolation and has full 
            access to the networking stack of the host system.
    none-    (1)-for testing purpose only we will connect none and it will not use any other purpose

## node
   node is nothing but server anode represents one of virtual machine each node has own operating systeam,resources such as cpu and memory

## docker compose 
   - one of tool create multi container we will up and down the multiple container
   - it defines name as docker-compose.yml file
   -services,volumes,managed comparised applications

## docker file 
   -it is text file. contains set of instructions to build image it defines the environment and confirguration needed to create a containerized application
   -when you build a docker image using docker file, docker reads the instruction and executes them sequentially to create the image

## docker inspect 
    we have detailed information about docker objects such as 
     -volumes
     -container
     -images
     -network
     -it provides json representation and wide range of meta data and confirgation deatils

## container restart polices
     -it defines the behaviour for automatically restarting containers in case of failure or termination.docker provides serveral restart polices
     -no
     -always
     -unless stopped
     -on failure

     1) NO- 
        -this is the default restart policy it means docker will not automatically restart the container if it   stops any reason you need to manually start the container if
        -when you create container without specifing restarting policies it will take "no" policy
    2) always-
        -unless or untill stop the container manually or removed by user till container will run
        -in case of docker demoin (nothing but flat form)
        -docker restart container will run
    3) unless stopped-
        - similar to always but dockers will not restart the container
        -if any case docker restart but container will not start
    4) on failure-
        - if any resources are getting problem it will take on failure

## docker swarm
   
   native container orchestration designed to manage and orchestration clusters of dockers hosts.
   it allows you deploy,scale and merge contrainized application
   -cluster management
   -service management
   -high availabity
   -load balancer
   -scalabity

## master 
 In orchestration systems like Kubernetes or Docker Swarm, the master node is responsible for managing the cluster's state, scheduling tasks, and coordinating communication among the nodes. It's the central controlling unit that makes decisions about where to deploy containers, how to scale applications, and ensures high availability.

## Worker Node 
 Worker nodes, also known as slave nodes in some contexts, are the computing nodes in the cluster responsible for running the containerized applications and executing the tasks assigned to them by the master node. They provide computational resources for hosting containers and executing the workload.
